// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/config/ssl_config.proto

package config

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Configuration for a secure gRPC channel
type SSLConfig struct {
	// private server key for SSL
	ServerKey string `protobuf:"bytes,1,opt,name=server_key,json=serverKey,proto3" json:"server_key,omitempty"`
	// public server certificate
	ServerCert string `protobuf:"bytes,2,opt,name=server_cert,json=serverCert,proto3" json:"server_cert,omitempty"`
	//  custom certificate authority
	CustomCa string `protobuf:"bytes,3,opt,name=custom_ca,json=customCa,proto3" json:"custom_ca,omitempty"`
	// valid client certificate required ?
	ClientVerify         bool     `protobuf:"varint,4,opt,name=client_verify,json=clientVerify,proto3" json:"client_verify,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSLConfig) Reset()         { *m = SSLConfig{} }
func (m *SSLConfig) String() string { return proto.CompactTextString(m) }
func (*SSLConfig) ProtoMessage()    {}
func (*SSLConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccd7dfe73700ac01, []int{0}
}

func (m *SSLConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SSLConfig.Unmarshal(m, b)
}
func (m *SSLConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SSLConfig.Marshal(b, m, deterministic)
}
func (m *SSLConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSLConfig.Merge(m, src)
}
func (m *SSLConfig) XXX_Size() int {
	return xxx_messageInfo_SSLConfig.Size(m)
}
func (m *SSLConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SSLConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SSLConfig proto.InternalMessageInfo

func (m *SSLConfig) GetServerKey() string {
	if m != nil {
		return m.ServerKey
	}
	return ""
}

func (m *SSLConfig) GetServerCert() string {
	if m != nil {
		return m.ServerCert
	}
	return ""
}

func (m *SSLConfig) GetCustomCa() string {
	if m != nil {
		return m.CustomCa
	}
	return ""
}

func (m *SSLConfig) GetClientVerify() bool {
	if m != nil {
		return m.ClientVerify
	}
	return false
}

func init() {
	proto.RegisterType((*SSLConfig)(nil), "tensorflow.serving.SSLConfig")
}

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/config/ssl_config.proto", fileDescriptor_ccd7dfe73700ac01)
}

var fileDescriptor_ccd7dfe73700ac01 = []byte{
	// 221 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x0a, 0x4f, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0x2f, 0xce, 0xcd, 0x2f, 0x4d, 0x37, 0x32, 0xd5, 0x2f,
	0x49, 0xcd, 0x2b, 0xce, 0x2f, 0x4a, 0xcb, 0xc9, 0x2f, 0x8f, 0x2f, 0x4e, 0x2d, 0x2a, 0xcb, 0xcc,
	0x4b, 0x8f, 0xcf, 0x48, 0xcd, 0x29, 0x48, 0x2d, 0xc2, 0x22, 0xa3, 0x9f, 0x9c, 0x9f, 0x97, 0x96,
	0x99, 0xae, 0x5f, 0x5c, 0x9c, 0x13, 0x0f, 0x61, 0xea, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x09,
	0x21, 0xd4, 0xea, 0x41, 0xd5, 0x2a, 0xf5, 0x32, 0x72, 0x71, 0x06, 0x07, 0xfb, 0x38, 0x83, 0xd5,
	0x09, 0xc9, 0x72, 0x71, 0x81, 0x24, 0x52, 0x8b, 0xe2, 0xb3, 0x53, 0x2b, 0x25, 0x18, 0x15, 0x18,
	0x35, 0x38, 0x83, 0x38, 0x21, 0x22, 0xde, 0xa9, 0x95, 0x42, 0xf2, 0x5c, 0xdc, 0x50, 0xe9, 0xe4,
	0xd4, 0xa2, 0x12, 0x09, 0x26, 0xb0, 0x3c, 0x54, 0x87, 0x73, 0x6a, 0x51, 0x89, 0x90, 0x34, 0x17,
	0x67, 0x72, 0x69, 0x71, 0x49, 0x7e, 0x6e, 0x7c, 0x72, 0xa2, 0x04, 0x33, 0x58, 0x9a, 0x03, 0x22,
	0xe0, 0x9c, 0x28, 0xa4, 0xcc, 0xc5, 0x9b, 0x9c, 0x93, 0x99, 0x9a, 0x57, 0x12, 0x5f, 0x96, 0x5a,
	0x94, 0x99, 0x56, 0x29, 0xc1, 0xa2, 0xc0, 0xa8, 0xc1, 0x11, 0xc4, 0x03, 0x11, 0x0c, 0x03, 0x8b,
	0x39, 0x79, 0x47, 0xb9, 0x51, 0xc7, 0xfb, 0x3f, 0x18, 0x19, 0x93, 0xd8, 0xc0, 0xfe, 0x36, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x88, 0x39, 0x54, 0x52, 0x01, 0x00, 0x00,
}
