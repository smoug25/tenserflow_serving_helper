// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto

package storage_path

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Config proto for FileSystemStoragePathSource.
type FileSystemStoragePathSourceConfig struct {
	// The servables to monitor for new versions, and aspire.
	Servables []*FileSystemStoragePathSourceConfig_ServableToMonitor `protobuf:"bytes,5,rep,name=servables,proto3" json:"servables,omitempty"`
	// A single servable name/base_path pair to monitor.
	// DEPRECATED: Use 'servables' instead.
	// TODO(b/30898016): Stop using these fields, and ultimately remove them here.
	ServableName string `protobuf:"bytes,1,opt,name=servable_name,json=servableName,proto3" json:"servable_name,omitempty"` // Deprecated: Do not use.
	BasePath     string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`             // Deprecated: Do not use.
	// How long to wait between file-system polling to look for children of
	// 'base_path', in seconds.
	//
	// If set to zero, filesystem will be polled exactly once. If set to a
	// negative value (for testing use only), polling will be entirely disabled.
	FileSystemPollWaitSeconds int64 `protobuf:"varint,3,opt,name=file_system_poll_wait_seconds,json=fileSystemPollWaitSeconds,proto3" json:"file_system_poll_wait_seconds,omitempty"`
	// If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
	// fail if, for any configured servables, the file system doesn't currently
	// contain at least one version under the base path.
	// (Otherwise, it will emit a warning and keep pinging the file system to
	// check for a version to appear later.)
	// DEPRECATED: Use 'servable_versions_always_present' instead, which includes
	// this behavior.
	// TODO(b/30898016): Remove 2019-10-31 or later.
	FailIfZeroVersionsAtStartup bool `protobuf:"varint,4,opt,name=fail_if_zero_versions_at_startup,json=failIfZeroVersionsAtStartup,proto3" json:"fail_if_zero_versions_at_startup,omitempty"` // Deprecated: Do not use.
	// If true, the servable is always expected to exist on the underlying
	// filesystem. FileSystemStoragePathSource::Create() and ::UpdateConfig() will
	// fail if, for any configured servables, the file system doesn't currently
	// contain at least one version under the base path. In addition, if a polling
	// loop find the base path empty, it will not unload existing servables.
	ServableVersionsAlwaysPresent bool     `protobuf:"varint,6,opt,name=servable_versions_always_present,json=servableVersionsAlwaysPresent,proto3" json:"servable_versions_always_present,omitempty"`
	XXX_NoUnkeyedLiteral          struct{} `json:"-"`
	XXX_unrecognized              []byte   `json:"-"`
	XXX_sizecache                 int32    `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig) Reset()         { *m = FileSystemStoragePathSourceConfig{} }
func (m *FileSystemStoragePathSourceConfig) String() string { return proto.CompactTextString(m) }
func (*FileSystemStoragePathSourceConfig) ProtoMessage()    {}
func (*FileSystemStoragePathSourceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0}
}

func (m *FileSystemStoragePathSourceConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig.Size(m)
}
func (m *FileSystemStoragePathSourceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig) GetServables() []*FileSystemStoragePathSourceConfig_ServableToMonitor {
	if m != nil {
		return m.Servables
	}
	return nil
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetServableName() string {
	if m != nil {
		return m.ServableName
	}
	return ""
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig) GetFileSystemPollWaitSeconds() int64 {
	if m != nil {
		return m.FileSystemPollWaitSeconds
	}
	return 0
}

// Deprecated: Do not use.
func (m *FileSystemStoragePathSourceConfig) GetFailIfZeroVersionsAtStartup() bool {
	if m != nil {
		return m.FailIfZeroVersionsAtStartup
	}
	return false
}

func (m *FileSystemStoragePathSourceConfig) GetServableVersionsAlwaysPresent() bool {
	if m != nil {
		return m.ServableVersionsAlwaysPresent
	}
	return false
}

// A policy that dictates which version(s) of a servable should be served.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy struct {
	// Types that are valid to be assigned to PolicyChoice:
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_
	//	*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_
	PolicyChoice         isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice `protobuf_oneof:"policy_choice"`
	XXX_NoUnkeyedLiteral struct{}                                                               `json:"-"`
	XXX_unrecognized     []byte                                                                 `json:"-"`
	XXX_sizecache        int32                                                                  `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0, 0}
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.Size(m)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy proto.InternalMessageInfo

type isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice interface {
	isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice()
}

type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_ struct {
	Latest *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest `protobuf:"bytes,100,opt,name=latest,proto3,oneof"`
}

type FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_ struct {
	All *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All `protobuf:"bytes,101,opt,name=all,proto3,oneof"`
}

type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_ struct {
	Specific *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific `protobuf:"bytes,102,opt,name=specific,proto3,oneof"`
}

func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}

func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}

func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_) isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice() {
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetPolicyChoice() isFileSystemStoragePathSourceConfig_ServableVersionPolicy_PolicyChoice {
	if m != nil {
		return m.PolicyChoice
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetLatest() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_); ok {
		return x.Latest
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetAll() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_); ok {
		return x.All
	}
	return nil
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy) GetSpecific() *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific {
	if x, ok := m.GetPolicyChoice().(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_); ok {
		return x.Specific
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest_)(nil),
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All_)(nil),
		(*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific_)(nil),
	}
}

// Serve the latest versions (i.e. the ones with the highest version
// numbers), among those found on disk.
//
// This is the default policy, with the default number of versions as 1.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest struct {
	// Number of latest versions to serve. (The default is 1.)
	NumVersions          uint32   `protobuf:"varint,1,opt,name=num_versions,json=numVersions,proto3" json:"num_versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0, 0, 0}
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.Size(m)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest) GetNumVersions() uint32 {
	if m != nil {
		return m.NumVersions
	}
	return 0
}

// Serve all versions found on disk.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_All struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_All{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0, 0, 1}
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.Size(m)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_All) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_All proto.InternalMessageInfo

// Serve a specific version (or set of versions).
//
// This policy is useful for rolling back to a specific version, or for
// canarying a specific version while still serving a separate stable
// version.
type FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific struct {
	// The version numbers to serve.
	Versions             []int64  `protobuf:"varint,1,rep,packed,name=versions,proto3" json:"versions,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific{}
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0, 0, 2}
}

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.Size(m)
}
func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific) GetVersions() []int64 {
	if m != nil {
		return m.Versions
	}
	return nil
}

// A servable name and base path to look for versions of the servable.
type FileSystemStoragePathSourceConfig_ServableToMonitor struct {
	// The servable name to supply in aspired-versions callback calls. Child
	// paths of 'base_path' are considered to be versions of this servable.
	ServableName string `protobuf:"bytes,1,opt,name=servable_name,json=servableName,proto3" json:"servable_name,omitempty"`
	// The path to monitor, i.e. look for child paths of the form base_path/123.
	BasePath string `protobuf:"bytes,2,opt,name=base_path,json=basePath,proto3" json:"base_path,omitempty"`
	// The policy to determines the number of versions of the servable to be
	// served at the same time.
	ServableVersionPolicy *FileSystemStoragePathSourceConfig_ServableVersionPolicy `protobuf:"bytes,4,opt,name=servable_version_policy,json=servableVersionPolicy,proto3" json:"servable_version_policy,omitempty"`
	XXX_NoUnkeyedLiteral  struct{}                                                 `json:"-"`
	XXX_unrecognized      []byte                                                   `json:"-"`
	XXX_sizecache         int32                                                    `json:"-"`
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) Reset() {
	*m = FileSystemStoragePathSourceConfig_ServableToMonitor{}
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) String() string {
	return proto.CompactTextString(m)
}
func (*FileSystemStoragePathSourceConfig_ServableToMonitor) ProtoMessage() {}
func (*FileSystemStoragePathSourceConfig_ServableToMonitor) Descriptor() ([]byte, []int) {
	return fileDescriptor_fd6d1c8972b636aa, []int{0, 1}
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Unmarshal(m, b)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Marshal(b, m, deterministic)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Merge(m, src)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_Size() int {
	return xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.Size(m)
}
func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) XXX_DiscardUnknown() {
	xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor.DiscardUnknown(m)
}

var xxx_messageInfo_FileSystemStoragePathSourceConfig_ServableToMonitor proto.InternalMessageInfo

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetServableName() string {
	if m != nil {
		return m.ServableName
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetBasePath() string {
	if m != nil {
		return m.BasePath
	}
	return ""
}

func (m *FileSystemStoragePathSourceConfig_ServableToMonitor) GetServableVersionPolicy() *FileSystemStoragePathSourceConfig_ServableVersionPolicy {
	if m != nil {
		return m.ServableVersionPolicy
	}
	return nil
}

func init() {
	proto.RegisterType((*FileSystemStoragePathSourceConfig)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Latest)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_All)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.All")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableVersionPolicy_Specific)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific")
	proto.RegisterType((*FileSystemStoragePathSourceConfig_ServableToMonitor)(nil), "tensorflow.serving.FileSystemStoragePathSourceConfig.ServableToMonitor")
}

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/sources/storage_path/file_system_storage_path_source.proto", fileDescriptor_fd6d1c8972b636aa)
}

var fileDescriptor_fd6d1c8972b636aa = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0xdf, 0x6a, 0xdb, 0x30,
	0x14, 0xc6, 0xeb, 0x3a, 0x0d, 0x8e, 0xd2, 0xb0, 0x4d, 0x50, 0xe6, 0xb9, 0x94, 0xb9, 0x1b, 0x6c,
	0x86, 0x81, 0x03, 0x19, 0xbb, 0x5f, 0x32, 0x58, 0xd3, 0xfd, 0x0d, 0x76, 0xb7, 0x41, 0x6f, 0x84,
	0xe2, 0x1e, 0x27, 0x02, 0xd9, 0x32, 0x92, 0xdc, 0x90, 0xde, 0xee, 0xf1, 0xf6, 0x0a, 0xbb, 0xd9,
	0x9b, 0x0c, 0xdb, 0x89, 0x93, 0x34, 0x81, 0x5d, 0x2c, 0x97, 0x96, 0xbe, 0xf3, 0xfb, 0x2c, 0x9d,
	0x4f, 0x07, 0xdd, 0x4d, 0x98, 0x9e, 0xe6, 0x63, 0x3f, 0x12, 0x49, 0x57, 0x25, 0x22, 0x9f, 0xf4,
	0xde, 0x74, 0x35, 0xa4, 0x4a, 0xc8, 0x98, 0x8b, 0x19, 0x51, 0x20, 0x6f, 0x59, 0x3a, 0x21, 0x53,
	0xe0, 0x19, 0xc8, 0x1d, 0x3b, 0x5d, 0x25, 0x72, 0x19, 0x81, 0xea, 0x2a, 0x2d, 0x24, 0x9d, 0x00,
	0xc9, 0xa8, 0x9e, 0x76, 0x63, 0xc6, 0x81, 0xa8, 0xb9, 0xd2, 0x90, 0x90, 0xf5, 0x0d, 0x52, 0xa9,
	0xfd, 0x4c, 0x0a, 0x2d, 0x30, 0x5e, 0xe1, 0xfc, 0x05, 0xee, 0xd9, 0x6f, 0x0b, 0x9d, 0xbf, 0x67,
	0x1c, 0xc2, 0xb2, 0x38, 0xac, 0x6a, 0x47, 0x54, 0x4f, 0xc3, 0xb2, 0xf2, 0x9d, 0x48, 0x63, 0x36,
	0xc1, 0x80, 0x5a, 0x45, 0x01, 0x1d, 0x73, 0x50, 0xf6, 0x91, 0x6b, 0x7a, 0xed, 0xde, 0x85, 0xbf,
	0x4d, 0xf3, 0xff, 0x49, 0xf2, 0xc3, 0x05, 0xe6, 0x4a, 0x7c, 0x16, 0x29, 0xd3, 0x42, 0x06, 0x2b,
	0x32, 0x7e, 0x89, 0x3a, 0xcb, 0x0f, 0x92, 0xd2, 0x04, 0x6c, 0xc3, 0x35, 0xbc, 0xd6, 0xe0, 0xd0,
	0x36, 0x82, 0xe3, 0xe5, 0xc6, 0x17, 0x9a, 0x00, 0x7e, 0x8a, 0x5a, 0x63, 0xaa, 0xaa, 0x33, 0xda,
	0x87, 0xb5, 0xc8, 0x2a, 0x16, 0x0b, 0x4b, 0xfc, 0x16, 0x9d, 0xad, 0xdf, 0x49, 0x26, 0x38, 0x27,
	0x33, 0xca, 0x34, 0x51, 0x10, 0x89, 0xf4, 0x46, 0xd9, 0xa6, 0x6b, 0x78, 0x66, 0xf0, 0x24, 0xae,
	0x7f, 0x78, 0x24, 0x38, 0xff, 0x41, 0x99, 0x0e, 0x2b, 0x01, 0xbe, 0x44, 0x6e, 0x4c, 0x19, 0x27,
	0x2c, 0x26, 0x77, 0x20, 0x05, 0xb9, 0x05, 0xa9, 0x98, 0x48, 0x15, 0xa1, 0x9a, 0x28, 0x4d, 0xa5,
	0xce, 0x33, 0xbb, 0xe1, 0x1a, 0x9e, 0x55, 0x3a, 0x9f, 0x16, 0xda, 0xcb, 0xf8, 0x1a, 0xa4, 0xf8,
	0xbe, 0x10, 0xf6, 0x75, 0x58, 0xc9, 0xf0, 0x05, 0x72, 0xeb, 0x63, 0xad, 0x30, 0x7c, 0x46, 0xe7,
	0x8a, 0x64, 0x12, 0x14, 0xa4, 0xda, 0x6e, 0x16, 0xa8, 0xe0, 0x6c, 0xa9, 0xab, 0x21, 0xa5, 0x6a,
	0x54, 0x89, 0x9c, 0x5f, 0x26, 0x3a, 0x09, 0x37, 0x15, 0x23, 0xc1, 0x59, 0x34, 0xc7, 0x1c, 0x35,
	0x39, 0xd5, 0xa0, 0xb4, 0x7d, 0xe3, 0x1a, 0x5e, 0xbb, 0x17, 0xfc, 0x5f, 0x77, 0x36, 0xe0, 0xfe,
	0xa7, 0x92, 0x3c, 0x3c, 0x08, 0x16, 0x1e, 0x38, 0x42, 0x26, 0xe5, 0xdc, 0x86, 0xd2, 0xea, 0xeb,
	0x3e, 0xad, 0xfa, 0x9c, 0x0f, 0x0f, 0x82, 0x82, 0x8e, 0x25, 0xb2, 0x54, 0x06, 0x11, 0x8b, 0x59,
	0x64, 0xc7, 0xa5, 0xd3, 0xd5, 0x3e, 0x9d, 0xc2, 0x05, 0x7b, 0x78, 0x10, 0xd4, 0x3e, 0xce, 0x2b,
	0xd4, 0xac, 0x0e, 0x8b, 0xcf, 0xd1, 0x71, 0x9a, 0x27, 0x75, 0xbb, 0xca, 0x24, 0x76, 0x82, 0x76,
	0x9a, 0x27, 0xcb, 0xd6, 0x38, 0x47, 0xc8, 0xec, 0x73, 0xee, 0xbc, 0x40, 0xd6, 0x92, 0x85, 0x1d,
	0x64, 0xad, 0x55, 0x98, 0x9e, 0x19, 0xd4, 0xdf, 0x83, 0x07, 0xa8, 0x93, 0x95, 0xd6, 0x24, 0x9a,
	0x0a, 0x16, 0x81, 0xf3, 0xc7, 0x40, 0x8f, 0xb6, 0x9e, 0x03, 0x7e, 0xbe, 0xf3, 0x0d, 0xdc, 0xcb,
	0xff, 0xe9, 0x56, 0xfe, 0xd7, 0xb2, 0xff, 0xd3, 0x40, 0x8f, 0xef, 0xe7, 0x8d, 0x54, 0xd6, 0x65,
	0x62, 0xdb, 0xbd, 0x8f, 0x7b, 0xbc, 0xc8, 0xe0, 0x44, 0xed, 0x5a, 0xfe, 0xd0, 0xb0, 0xcc, 0x87,
	0x8d, 0xc1, 0xb7, 0xeb, 0x70, 0x3f, 0x03, 0x6f, 0x63, 0xde, 0x8d, 0x9b, 0xe5, 0x40, 0x7b, 0xfd,
	0x37, 0x00, 0x00, 0xff, 0xff, 0x49, 0x1a, 0x46, 0x8c, 0x4e, 0x05, 0x00, 0x00,
}
