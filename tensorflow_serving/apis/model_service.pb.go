// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/apis/model_service.proto

package tensorflow_serving

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/apis/model_service.proto", fileDescriptor_80c3541574548b6d)
}

var fileDescriptor_80c3541574548b6d = []byte{
	// 227 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x8f, 0xbf, 0x4a, 0x04, 0x31,
	0x10, 0xc6, 0x59, 0x04, 0x8b, 0x20, 0x16, 0xe9, 0xdc, 0x17, 0xf0, 0x4f, 0x91, 0xc0, 0x89, 0x2f,
	0xa0, 0x85, 0x36, 0x36, 0x67, 0x23, 0x58, 0x2c, 0xb9, 0xdb, 0xb9, 0x5c, 0x20, 0x99, 0x89, 0x99,
	0x89, 0x3e, 0xb2, 0xaf, 0x60, 0x29, 0x5e, 0x16, 0x44, 0x5c, 0xf0, 0x8a, 0x6b, 0xe7, 0xfb, 0xf1,
	0xfb, 0xe6, 0x53, 0xcf, 0x3e, 0xc8, 0xb6, 0xae, 0xcc, 0x9a, 0x92, 0xe5, 0x44, 0xd5, 0x2f, 0x6e,
	0xac, 0x00, 0x32, 0x95, 0x4d, 0xa4, 0xf7, 0x81, 0xa1, 0xbc, 0x05, 0xf4, 0xc3, 0x16, 0x62, 0x86,
	0x32, 0x93, 0x58, 0x97, 0x03, 0xdb, 0x44, 0x23, 0xc4, 0x76, 0x5a, 0x83, 0xc9, 0x85, 0x84, 0xb4,
	0xfe, 0x81, 0xcd, 0x04, 0xf7, 0x2f, 0x07, 0x69, 0xf3, 0x20, 0xc3, 0xd4, 0x28, 0x4e, 0x2a, 0xb7,
	0xc2, 0x03, 0xc9, 0x9b, 0x38, 0x39, 0x74, 0x1e, 0x12, 0xa0, 0x34, 0xf9, 0xe2, 0xa3, 0x53, 0x27,
	0x8f, 0xdf, 0xd1, 0x53, 0x1b, 0xa9, 0xbd, 0x3a, 0xbd, 0x07, 0x69, 0xa7, 0xdd, 0x17, 0xfa, 0xd2,
	0xfc, 0x5d, 0x6c, 0x7e, 0x33, 0x4b, 0x78, 0xad, 0xc0, 0xd2, 0x5f, 0xed, 0x83, 0x72, 0x26, 0x64,
	0xd0, 0xa8, 0xce, 0x1e, 0x1c, 0x8e, 0x11, 0x96, 0x10, 0xc9, 0x8d, 0x77, 0x84, 0x9b, 0xe0, 0x27,
	0x91, 0x3e, 0x9f, 0x13, 0xcd, 0x80, 0xfd, 0xc5, 0xff, 0x60, 0xeb, 0xbb, 0x3d, 0xfa, 0xec, 0xba,
	0xd5, 0xf1, 0x6e, 0xf5, 0xf5, 0x57, 0x00, 0x00, 0x00, 0xff, 0xff, 0x18, 0xef, 0x15, 0xba, 0x1f,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ModelServiceClient is the client API for ModelService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ModelServiceClient interface {
	// Gets status of model. If the ModelSpec in the request does not specify
	// version, information about all versions of the model will be returned. If
	// the ModelSpec in the request does specify a version, the status of only
	// that version will be returned.
	GetModelStatus(ctx context.Context, in *GetModelStatusRequest, opts ...grpc.CallOption) (*GetModelStatusResponse, error)
	// Reloads the set of served models. The new config supersedes the old one,
	// so if a model is omitted from the new config it will be unloaded and no
	// longer served.
	HandleReloadConfigRequest(ctx context.Context, in *ReloadConfigRequest, opts ...grpc.CallOption) (*ReloadConfigResponse, error)
}

type modelServiceClient struct {
	cc *grpc.ClientConn
}

func NewModelServiceClient(cc *grpc.ClientConn) ModelServiceClient {
	return &modelServiceClient{cc}
}

func (c *modelServiceClient) GetModelStatus(ctx context.Context, in *GetModelStatusRequest, opts ...grpc.CallOption) (*GetModelStatusResponse, error) {
	out := new(GetModelStatusResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.serving.ModelService/GetModelStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modelServiceClient) HandleReloadConfigRequest(ctx context.Context, in *ReloadConfigRequest, opts ...grpc.CallOption) (*ReloadConfigResponse, error) {
	out := new(ReloadConfigResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.serving.ModelService/HandleReloadConfigRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModelServiceServer is the server API for ModelService service.
type ModelServiceServer interface {
	// Gets status of model. If the ModelSpec in the request does not specify
	// version, information about all versions of the model will be returned. If
	// the ModelSpec in the request does specify a version, the status of only
	// that version will be returned.
	GetModelStatus(context.Context, *GetModelStatusRequest) (*GetModelStatusResponse, error)
	// Reloads the set of served models. The new config supersedes the old one,
	// so if a model is omitted from the new config it will be unloaded and no
	// longer served.
	HandleReloadConfigRequest(context.Context, *ReloadConfigRequest) (*ReloadConfigResponse, error)
}

// UnimplementedModelServiceServer can be embedded to have forward compatible implementations.
type UnimplementedModelServiceServer struct {
}

func (*UnimplementedModelServiceServer) GetModelStatus(ctx context.Context, req *GetModelStatusRequest) (*GetModelStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModelStatus not implemented")
}
func (*UnimplementedModelServiceServer) HandleReloadConfigRequest(ctx context.Context, req *ReloadConfigRequest) (*ReloadConfigResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HandleReloadConfigRequest not implemented")
}

func RegisterModelServiceServer(s *grpc.Server, srv ModelServiceServer) {
	s.RegisterService(&_ModelService_serviceDesc, srv)
}

func _ModelService_GetModelStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetModelStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).GetModelStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.serving.ModelService/GetModelStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).GetModelStatus(ctx, req.(*GetModelStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModelService_HandleReloadConfigRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReloadConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModelServiceServer).HandleReloadConfigRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.serving.ModelService/HandleReloadConfigRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModelServiceServer).HandleReloadConfigRequest(ctx, req.(*ReloadConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ModelService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.serving.ModelService",
	HandlerType: (*ModelServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetModelStatus",
			Handler:    _ModelService_GetModelStatus_Handler,
		},
		{
			MethodName: "HandleReloadConfigRequest",
			Handler:    _ModelService_HandleReloadConfigRequest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/smoug25/tensorflow_serving_helper/tensorflow_serving/apis/model_service.proto",
}
