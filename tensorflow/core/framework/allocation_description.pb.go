// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow/core/framework/allocation_description.proto

package framework

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllocationDescription struct {
	// Total number of bytes requested
	RequestedBytes int64 `protobuf:"varint,1,opt,name=requested_bytes,json=requestedBytes,proto3" json:"requested_bytes,omitempty"`
	// Total number of bytes allocated if known
	AllocatedBytes int64 `protobuf:"varint,2,opt,name=allocated_bytes,json=allocatedBytes,proto3" json:"allocated_bytes,omitempty"`
	// Name of the allocator used
	AllocatorName string `protobuf:"bytes,3,opt,name=allocator_name,json=allocatorName,proto3" json:"allocator_name,omitempty"`
	// Identifier of the allocated buffer if known
	AllocationId int64 `protobuf:"varint,4,opt,name=allocation_id,json=allocationId,proto3" json:"allocation_id,omitempty"`
	// Set if this tensor only has one remaining reference
	HasSingleReference bool `protobuf:"varint,5,opt,name=has_single_reference,json=hasSingleReference,proto3" json:"has_single_reference,omitempty"`
	// Address of the allocation.
	Ptr                  uint64   `protobuf:"varint,6,opt,name=ptr,proto3" json:"ptr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllocationDescription) Reset()         { *m = AllocationDescription{} }
func (m *AllocationDescription) String() string { return proto.CompactTextString(m) }
func (*AllocationDescription) ProtoMessage()    {}
func (*AllocationDescription) Descriptor() ([]byte, []int) {
	return fileDescriptor_3aaff3edf59eb582, []int{0}
}

func (m *AllocationDescription) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllocationDescription.Unmarshal(m, b)
}
func (m *AllocationDescription) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllocationDescription.Marshal(b, m, deterministic)
}
func (m *AllocationDescription) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllocationDescription.Merge(m, src)
}
func (m *AllocationDescription) XXX_Size() int {
	return xxx_messageInfo_AllocationDescription.Size(m)
}
func (m *AllocationDescription) XXX_DiscardUnknown() {
	xxx_messageInfo_AllocationDescription.DiscardUnknown(m)
}

var xxx_messageInfo_AllocationDescription proto.InternalMessageInfo

func (m *AllocationDescription) GetRequestedBytes() int64 {
	if m != nil {
		return m.RequestedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatedBytes() int64 {
	if m != nil {
		return m.AllocatedBytes
	}
	return 0
}

func (m *AllocationDescription) GetAllocatorName() string {
	if m != nil {
		return m.AllocatorName
	}
	return ""
}

func (m *AllocationDescription) GetAllocationId() int64 {
	if m != nil {
		return m.AllocationId
	}
	return 0
}

func (m *AllocationDescription) GetHasSingleReference() bool {
	if m != nil {
		return m.HasSingleReference
	}
	return false
}

func (m *AllocationDescription) GetPtr() uint64 {
	if m != nil {
		return m.Ptr
	}
	return 0
}

func init() {
	proto.RegisterType((*AllocationDescription)(nil), "tensorflow.AllocationDescription")
}

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow/core/framework/allocation_description.proto", fileDescriptor_3aaff3edf59eb582)
}

var fileDescriptor_3aaff3edf59eb582 = []byte{
	// 296 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0x4f, 0x4b, 0xf3, 0x40,
	0x10, 0xc6, 0xd9, 0xb7, 0x7d, 0x8b, 0x2e, 0x56, 0x25, 0x28, 0x2c, 0x78, 0x09, 0x8a, 0x98, 0x53,
	0x22, 0x8a, 0x1f, 0xc0, 0x22, 0x82, 0x17, 0x29, 0xf1, 0xe6, 0x65, 0xd9, 0x6e, 0xa6, 0xc9, 0x62,
	0xb2, 0x13, 0x67, 0xb7, 0x16, 0xef, 0x7e, 0x68, 0xbd, 0x49, 0x5a, 0xbb, 0xe9, 0xc1, 0xa3, 0xb7,
	0xe1, 0xf7, 0xfc, 0xf6, 0x0f, 0xcf, 0x70, 0x5d, 0x1a, 0x5f, 0x2d, 0x66, 0xa9, 0xc6, 0x26, 0x73,
	0x0d, 0x2e, 0xca, 0xab, 0x9b, 0xcc, 0x83, 0x75, 0x48, 0xf3, 0x1a, 0x97, 0xd2, 0x01, 0xbd, 0x19,
	0x5b, 0xca, 0x0a, 0xea, 0x16, 0x68, 0x2b, 0xc9, 0x34, 0x12, 0x64, 0x73, 0x52, 0x0d, 0x2c, 0x91,
	0x5e, 0x32, 0x55, 0xd7, 0xa8, 0x95, 0x37, 0x68, 0x65, 0x01, 0x4e, 0x93, 0x69, 0xbb, 0x39, 0x6d,
	0x09, 0x3d, 0x46, 0xbc, 0x3f, 0x77, 0xfa, 0xc5, 0xf8, 0xf1, 0x6d, 0x90, 0xef, 0x7a, 0x37, 0xba,
	0xe0, 0x07, 0x04, 0xaf, 0x0b, 0x70, 0x1e, 0x0a, 0x39, 0x7b, 0xf7, 0xe0, 0x04, 0x8b, 0x59, 0x32,
	0xc8, 0xf7, 0x03, 0x9e, 0x74, 0xb4, 0x13, 0x7f, 0x9e, 0x0b, 0xe2, 0xbf, 0xb5, 0x18, 0xf0, 0x5a,
	0x3c, 0xe7, 0x1b, 0x82, 0x24, 0xad, 0x6a, 0x40, 0x0c, 0x62, 0x96, 0xec, 0xe6, 0xe3, 0x40, 0x1f,
	0x55, 0x03, 0xd1, 0x19, 0x1f, 0x6f, 0x7d, 0xdf, 0x14, 0x62, 0xb8, 0xba, 0x6d, 0xaf, 0x87, 0x0f,
	0x45, 0x74, 0xc9, 0x8f, 0x2a, 0xe5, 0xa4, 0x33, 0xb6, 0xac, 0x41, 0x12, 0xcc, 0x81, 0xc0, 0x6a,
	0x10, 0xff, 0x63, 0x96, 0xec, 0xe4, 0x51, 0xa5, 0xdc, 0xd3, 0x2a, 0xca, 0x37, 0x49, 0x74, 0xc8,
	0x07, 0xad, 0x27, 0x31, 0x8a, 0x59, 0x32, 0xcc, 0xbb, 0x71, 0xf2, 0xc1, 0xb8, 0x40, 0x2a, 0xd3,
	0xbe, 0x8e, 0x34, 0x34, 0x38, 0x39, 0xf9, 0xb5, 0x95, 0x69, 0x57, 0xa0, 0x9b, 0xb2, 0xe7, 0xfb,
	0xbf, 0x59, 0xd4, 0x27, 0x63, 0xb3, 0xd1, 0x6a, 0x2b, 0xd7, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x57, 0x5f, 0xa9, 0x13, 0xfc, 0x01, 0x00, 0x00,
}
