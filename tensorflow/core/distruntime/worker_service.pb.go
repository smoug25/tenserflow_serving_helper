// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/worker_service.proto

package distruntime

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/worker_service.proto", fileDescriptor_32cb3833526e8235)
}

var fileDescriptor_32cb3833526e8235 = []byte{
	// 484 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x5f, 0x6f, 0xd3, 0x30,
	0x14, 0xc5, 0xe1, 0x85, 0xb2, 0x2b, 0xa6, 0x22, 0xef, 0xad, 0xdb, 0x60, 0x6c, 0x08, 0xde, 0x1a,
	0x69, 0x88, 0x0f, 0xb0, 0xb4, 0xa8, 0x43, 0x80, 0x34, 0xd2, 0x4a, 0x48, 0x95, 0xd0, 0x94, 0x86,
	0x5b, 0x37, 0x22, 0xb5, 0x8d, 0xff, 0x6c, 0x4f, 0x7c, 0x67, 0x3e, 0x02, 0x4a, 0x62, 0xb7, 0xf6,
	0xe6, 0x86, 0x07, 0xf6, 0x7a, 0xce, 0xf1, 0xef, 0xdc, 0xaa, 0xb9, 0x17, 0xe6, 0xb4, 0xd4, 0x2b,
	0xb3, 0x18, 0x16, 0x7c, 0x9d, 0xa8, 0x35, 0x37, 0xf4, 0xfc, 0x7d, 0xa2, 0x91, 0x29, 0x2e, 0x97,
	0x15, 0xbf, 0xbd, 0x56, 0x28, 0x6f, 0x4a, 0x46, 0xaf, 0x57, 0x58, 0x09, 0x94, 0x9e, 0x93, 0x14,
	0x5c, 0x62, 0x22, 0x24, 0xd7, 0x7c, 0x61, 0x96, 0xc9, 0x2d, 0x97, 0x3f, 0x51, 0xb6, 0xf1, 0x02,
	0x87, 0x8d, 0x4e, 0xfa, 0xdb, 0xf8, 0x90, 0x4a, 0x51, 0x0c, 0xb2, 0x87, 0x2c, 0x6b, 0x4b, 0xce,
	0xff, 0xec, 0xc1, 0xfe, 0xb7, 0x46, 0x98, 0xb6, 0xe5, 0xe4, 0x12, 0xf6, 0x26, 0xa8, 0xa7, 0x3a,
	0xd7, 0x46, 0x91, 0xa3, 0xa1, 0x37, 0xc4, 0x46, 0xce, 0xf0, 0x97, 0x41, 0xa5, 0x07, 0xc7, 0x3b,
	0x5c, 0x25, 0x38, 0x53, 0x48, 0x96, 0x70, 0x30, 0x92, 0x98, 0x6b, 0x74, 0x05, 0x4a, 0x95, 0x9c,
	0x91, 0x37, 0xfe, 0xab, 0x48, 0xc0, 0xd1, 0xdf, 0xfe, 0x33, 0xb7, 0xed, 0x19, 0x63, 0x85, 0x9d,
	0x3d, 0x91, 0x40, 0xb4, 0x27, 0x9a, 0xb3, 0x3d, 0x33, 0xd8, 0xcf, 0x90, 0x96, 0x4a, 0xa3, 0x9c,
	0xc8, 0x5c, 0xac, 0xc8, 0x89, 0xff, 0x32, 0xb0, 0x1c, 0xfb, 0x55, 0x47, 0xc2, 0x52, 0xe7, 0xd0,
	0x1f, 0xa3, 0x0c, 0xb8, 0xa7, 0xe1, 0x44, 0x32, 0x46, 0x3e, 0xeb, 0xcc, 0x58, 0xf6, 0x07, 0x78,
	0x9a, 0x19, 0xd6, 0x42, 0x0f, 0x83, 0x51, 0xac, 0xea, 0x68, 0x47, 0x71, 0xd3, 0x62, 0xbe, 0xc2,
	0xb3, 0x51, 0x85, 0x39, 0x33, 0xa2, 0x45, 0xbd, 0x0c, 0xfe, 0x19, 0xcf, 0x71, 0xb8, 0x93, 0xdd,
	0x01, 0x8b, 0xfc, 0x04, 0x60, 0xf5, 0x8b, 0xaa, 0x22, 0xc7, 0x91, 0xfc, 0x45, 0x55, 0x39, 0xdc,
	0x8b, 0x5d, 0xb6, 0x85, 0x7d, 0x01, 0xc8, 0xb0, 0xb8, 0x99, 0x35, 0xa1, 0x10, 0xb6, 0xd5, 0xa3,
	0x30, 0xdf, 0x6e, 0x61, 0xa7, 0x8f, 0x48, 0x0a, 0xbd, 0xcf, 0x9c, 0xd2, 0x92, 0x51, 0x32, 0xf0,
	0xc3, 0x56, 0x74, 0xa0, 0xc3, 0xa8, 0x67, 0x47, 0x4a, 0xa1, 0x37, 0x93, 0x79, 0x71, 0x8f, 0x61,
	0xc5, 0x28, 0x63, 0xe3, 0x59, 0xc6, 0x18, 0x7a, 0xf5, 0x7c, 0xa9, 0x59, 0x86, 0x0c, 0x2b, 0x46,
	0x19, 0x1b, 0x6f, 0xf3, 0x6b, 0xe6, 0xd0, 0x6f, 0x56, 0x13, 0xc5, 0xb4, 0x7e, 0xc0, 0x0a, 0x0c,
	0xbf, 0xaf, 0x3b, 0x66, 0xf4, 0xfb, 0xba, 0x97, 0xd9, 0x6e, 0xc4, 0x88, 0xaf, 0x45, 0xbd, 0x32,
	0x13, 0xc9, 0x8d, 0x08, 0x37, 0x22, 0xb0, 0xa2, 0x1b, 0x71, 0x27, 0x61, 0xa9, 0xdf, 0xe1, 0xb9,
	0x33, 0x3e, 0x32, 0xa5, 0xf3, 0x7a, 0xe4, 0xb3, 0xd8, 0x33, 0xe7, 0x3a, 0xf6, 0xeb, 0xee, 0x50,
	0x8b, 0x4f, 0x7f, 0xc3, 0x80, 0x4b, 0xea, 0x47, 0x7f, 0x94, 0x4a, 0x4b, 0xc3, 0x74, 0xb9, 0xc6,
	0xf4, 0x20, 0xb8, 0x86, 0x57, 0xf5, 0x91, 0x54, 0x57, 0x8f, 0xe7, 0x97, 0xff, 0x75, 0x7b, 0xbd,
	0x82, 0xc5, 0x93, 0xe6, 0xf0, 0xbe, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0x91, 0x22, 0x6e, 0xbb,
	0x3b, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerServiceClient is the client API for WorkerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerServiceClient interface {
	// See worker.proto for details.
	GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error)
	// See worker.proto for details.
	CreateWorkerSession(ctx context.Context, in *CreateWorkerSessionRequest, opts ...grpc.CallOption) (*CreateWorkerSessionResponse, error)
	// See worker.proto for details.
	DeleteWorkerSession(ctx context.Context, in *DeleteWorkerSessionRequest, opts ...grpc.CallOption) (*DeleteWorkerSessionResponse, error)
	// See worker.proto for details.
	RegisterGraph(ctx context.Context, in *RegisterGraphRequest, opts ...grpc.CallOption) (*RegisterGraphResponse, error)
	// See worker.proto for details.
	DeregisterGraph(ctx context.Context, in *DeregisterGraphRequest, opts ...grpc.CallOption) (*DeregisterGraphResponse, error)
	// See worker.proto for details.
	RunGraph(ctx context.Context, in *RunGraphRequest, opts ...grpc.CallOption) (*RunGraphResponse, error)
	// See worker.proto for details.
	CleanupGraph(ctx context.Context, in *CleanupGraphRequest, opts ...grpc.CallOption) (*CleanupGraphResponse, error)
	// See worker.proto for details.
	CleanupAll(ctx context.Context, in *CleanupAllRequest, opts ...grpc.CallOption) (*CleanupAllResponse, error)
	// See worker.proto for details.
	RecvTensor(ctx context.Context, in *RecvTensorRequest, opts ...grpc.CallOption) (*RecvTensorResponse, error)
	// See worker.proto for details.
	Logging(ctx context.Context, in *LoggingRequest, opts ...grpc.CallOption) (*LoggingResponse, error)
	// See worker.proto for details.
	Tracing(ctx context.Context, in *TracingRequest, opts ...grpc.CallOption) (*TracingResponse, error)
	// See worker.proto for details.
	RecvBuf(ctx context.Context, in *RecvBufRequest, opts ...grpc.CallOption) (*RecvBufResponse, error)
	// See worker.proto for details.
	GetStepSequence(ctx context.Context, in *GetStepSequenceRequest, opts ...grpc.CallOption) (*GetStepSequenceResponse, error)
	// See worker.proto for details.
	CompleteGroup(ctx context.Context, in *CompleteGroupRequest, opts ...grpc.CallOption) (*CompleteGroupResponse, error)
	// See worker.proto for details.
	CompleteInstance(ctx context.Context, in *CompleteInstanceRequest, opts ...grpc.CallOption) (*CompleteInstanceResponse, error)
}

type workerServiceClient struct {
	cc *grpc.ClientConn
}

func NewWorkerServiceClient(cc *grpc.ClientConn) WorkerServiceClient {
	return &workerServiceClient{cc}
}

func (c *workerServiceClient) GetStatus(ctx context.Context, in *GetStatusRequest, opts ...grpc.CallOption) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/GetStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CreateWorkerSession(ctx context.Context, in *CreateWorkerSessionRequest, opts ...grpc.CallOption) (*CreateWorkerSessionResponse, error) {
	out := new(CreateWorkerSessionResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CreateWorkerSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) DeleteWorkerSession(ctx context.Context, in *DeleteWorkerSessionRequest, opts ...grpc.CallOption) (*DeleteWorkerSessionResponse, error) {
	out := new(DeleteWorkerSessionResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/DeleteWorkerSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RegisterGraph(ctx context.Context, in *RegisterGraphRequest, opts ...grpc.CallOption) (*RegisterGraphResponse, error) {
	out := new(RegisterGraphResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RegisterGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) DeregisterGraph(ctx context.Context, in *DeregisterGraphRequest, opts ...grpc.CallOption) (*DeregisterGraphResponse, error) {
	out := new(DeregisterGraphResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/DeregisterGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RunGraph(ctx context.Context, in *RunGraphRequest, opts ...grpc.CallOption) (*RunGraphResponse, error) {
	out := new(RunGraphResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RunGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CleanupGraph(ctx context.Context, in *CleanupGraphRequest, opts ...grpc.CallOption) (*CleanupGraphResponse, error) {
	out := new(CleanupGraphResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CleanupGraph", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CleanupAll(ctx context.Context, in *CleanupAllRequest, opts ...grpc.CallOption) (*CleanupAllResponse, error) {
	out := new(CleanupAllResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CleanupAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RecvTensor(ctx context.Context, in *RecvTensorRequest, opts ...grpc.CallOption) (*RecvTensorResponse, error) {
	out := new(RecvTensorResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RecvTensor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Logging(ctx context.Context, in *LoggingRequest, opts ...grpc.CallOption) (*LoggingResponse, error) {
	out := new(LoggingResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/Logging", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) Tracing(ctx context.Context, in *TracingRequest, opts ...grpc.CallOption) (*TracingResponse, error) {
	out := new(TracingResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/Tracing", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) RecvBuf(ctx context.Context, in *RecvBufRequest, opts ...grpc.CallOption) (*RecvBufResponse, error) {
	out := new(RecvBufResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/RecvBuf", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) GetStepSequence(ctx context.Context, in *GetStepSequenceRequest, opts ...grpc.CallOption) (*GetStepSequenceResponse, error) {
	out := new(GetStepSequenceResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/GetStepSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CompleteGroup(ctx context.Context, in *CompleteGroupRequest, opts ...grpc.CallOption) (*CompleteGroupResponse, error) {
	out := new(CompleteGroupResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CompleteGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerServiceClient) CompleteInstance(ctx context.Context, in *CompleteInstanceRequest, opts ...grpc.CallOption) (*CompleteInstanceResponse, error) {
	out := new(CompleteInstanceResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.WorkerService/CompleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServiceServer is the server API for WorkerService service.
type WorkerServiceServer interface {
	// See worker.proto for details.
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	// See worker.proto for details.
	CreateWorkerSession(context.Context, *CreateWorkerSessionRequest) (*CreateWorkerSessionResponse, error)
	// See worker.proto for details.
	DeleteWorkerSession(context.Context, *DeleteWorkerSessionRequest) (*DeleteWorkerSessionResponse, error)
	// See worker.proto for details.
	RegisterGraph(context.Context, *RegisterGraphRequest) (*RegisterGraphResponse, error)
	// See worker.proto for details.
	DeregisterGraph(context.Context, *DeregisterGraphRequest) (*DeregisterGraphResponse, error)
	// See worker.proto for details.
	RunGraph(context.Context, *RunGraphRequest) (*RunGraphResponse, error)
	// See worker.proto for details.
	CleanupGraph(context.Context, *CleanupGraphRequest) (*CleanupGraphResponse, error)
	// See worker.proto for details.
	CleanupAll(context.Context, *CleanupAllRequest) (*CleanupAllResponse, error)
	// See worker.proto for details.
	RecvTensor(context.Context, *RecvTensorRequest) (*RecvTensorResponse, error)
	// See worker.proto for details.
	Logging(context.Context, *LoggingRequest) (*LoggingResponse, error)
	// See worker.proto for details.
	Tracing(context.Context, *TracingRequest) (*TracingResponse, error)
	// See worker.proto for details.
	RecvBuf(context.Context, *RecvBufRequest) (*RecvBufResponse, error)
	// See worker.proto for details.
	GetStepSequence(context.Context, *GetStepSequenceRequest) (*GetStepSequenceResponse, error)
	// See worker.proto for details.
	CompleteGroup(context.Context, *CompleteGroupRequest) (*CompleteGroupResponse, error)
	// See worker.proto for details.
	CompleteInstance(context.Context, *CompleteInstanceRequest) (*CompleteInstanceResponse, error)
}

// UnimplementedWorkerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServiceServer struct {
}

func (*UnimplementedWorkerServiceServer) GetStatus(ctx context.Context, req *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatus not implemented")
}
func (*UnimplementedWorkerServiceServer) CreateWorkerSession(ctx context.Context, req *CreateWorkerSessionRequest) (*CreateWorkerSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWorkerSession not implemented")
}
func (*UnimplementedWorkerServiceServer) DeleteWorkerSession(ctx context.Context, req *DeleteWorkerSessionRequest) (*DeleteWorkerSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteWorkerSession not implemented")
}
func (*UnimplementedWorkerServiceServer) RegisterGraph(ctx context.Context, req *RegisterGraphRequest) (*RegisterGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterGraph not implemented")
}
func (*UnimplementedWorkerServiceServer) DeregisterGraph(ctx context.Context, req *DeregisterGraphRequest) (*DeregisterGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeregisterGraph not implemented")
}
func (*UnimplementedWorkerServiceServer) RunGraph(ctx context.Context, req *RunGraphRequest) (*RunGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunGraph not implemented")
}
func (*UnimplementedWorkerServiceServer) CleanupGraph(ctx context.Context, req *CleanupGraphRequest) (*CleanupGraphResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupGraph not implemented")
}
func (*UnimplementedWorkerServiceServer) CleanupAll(ctx context.Context, req *CleanupAllRequest) (*CleanupAllResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CleanupAll not implemented")
}
func (*UnimplementedWorkerServiceServer) RecvTensor(ctx context.Context, req *RecvTensorRequest) (*RecvTensorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvTensor not implemented")
}
func (*UnimplementedWorkerServiceServer) Logging(ctx context.Context, req *LoggingRequest) (*LoggingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logging not implemented")
}
func (*UnimplementedWorkerServiceServer) Tracing(ctx context.Context, req *TracingRequest) (*TracingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Tracing not implemented")
}
func (*UnimplementedWorkerServiceServer) RecvBuf(ctx context.Context, req *RecvBufRequest) (*RecvBufResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RecvBuf not implemented")
}
func (*UnimplementedWorkerServiceServer) GetStepSequence(ctx context.Context, req *GetStepSequenceRequest) (*GetStepSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStepSequence not implemented")
}
func (*UnimplementedWorkerServiceServer) CompleteGroup(ctx context.Context, req *CompleteGroupRequest) (*CompleteGroupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteGroup not implemented")
}
func (*UnimplementedWorkerServiceServer) CompleteInstance(ctx context.Context, req *CompleteInstanceRequest) (*CompleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteInstance not implemented")
}

func RegisterWorkerServiceServer(s *grpc.Server, srv WorkerServiceServer) {
	s.RegisterService(&_WorkerService_serviceDesc, srv)
}

func _WorkerService_GetStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/GetStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetStatus(ctx, req.(*GetStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CreateWorkerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWorkerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CreateWorkerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CreateWorkerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CreateWorkerSession(ctx, req.(*CreateWorkerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_DeleteWorkerSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWorkerSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).DeleteWorkerSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/DeleteWorkerSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).DeleteWorkerSession(ctx, req.(*DeleteWorkerSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RegisterGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RegisterGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RegisterGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RegisterGraph(ctx, req.(*RegisterGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_DeregisterGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeregisterGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).DeregisterGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/DeregisterGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).DeregisterGraph(ctx, req.(*DeregisterGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RunGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RunGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RunGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RunGraph(ctx, req.(*RunGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CleanupGraph_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupGraphRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CleanupGraph(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CleanupGraph",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CleanupGraph(ctx, req.(*CleanupGraphRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CleanupAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CleanupAllRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CleanupAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CleanupAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CleanupAll(ctx, req.(*CleanupAllRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RecvTensor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvTensorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RecvTensor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RecvTensor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RecvTensor(ctx, req.(*RecvTensorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Logging_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoggingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Logging(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/Logging",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Logging(ctx, req.(*LoggingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_Tracing_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TracingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).Tracing(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/Tracing",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).Tracing(ctx, req.(*TracingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_RecvBuf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecvBufRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).RecvBuf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/RecvBuf",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).RecvBuf(ctx, req.(*RecvBufRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_GetStepSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStepSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).GetStepSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/GetStepSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).GetStepSequence(ctx, req.(*GetStepSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CompleteGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteGroupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CompleteGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CompleteGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CompleteGroup(ctx, req.(*CompleteGroupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WorkerService_CompleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServiceServer).CompleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.WorkerService/CompleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServiceServer).CompleteInstance(ctx, req.(*CompleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _WorkerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.grpc.WorkerService",
	HandlerType: (*WorkerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetStatus",
			Handler:    _WorkerService_GetStatus_Handler,
		},
		{
			MethodName: "CreateWorkerSession",
			Handler:    _WorkerService_CreateWorkerSession_Handler,
		},
		{
			MethodName: "DeleteWorkerSession",
			Handler:    _WorkerService_DeleteWorkerSession_Handler,
		},
		{
			MethodName: "RegisterGraph",
			Handler:    _WorkerService_RegisterGraph_Handler,
		},
		{
			MethodName: "DeregisterGraph",
			Handler:    _WorkerService_DeregisterGraph_Handler,
		},
		{
			MethodName: "RunGraph",
			Handler:    _WorkerService_RunGraph_Handler,
		},
		{
			MethodName: "CleanupGraph",
			Handler:    _WorkerService_CleanupGraph_Handler,
		},
		{
			MethodName: "CleanupAll",
			Handler:    _WorkerService_CleanupAll_Handler,
		},
		{
			MethodName: "RecvTensor",
			Handler:    _WorkerService_RecvTensor_Handler,
		},
		{
			MethodName: "Logging",
			Handler:    _WorkerService_Logging_Handler,
		},
		{
			MethodName: "Tracing",
			Handler:    _WorkerService_Tracing_Handler,
		},
		{
			MethodName: "RecvBuf",
			Handler:    _WorkerService_RecvBuf_Handler,
		},
		{
			MethodName: "GetStepSequence",
			Handler:    _WorkerService_GetStepSequence_Handler,
		},
		{
			MethodName: "CompleteGroup",
			Handler:    _WorkerService_CompleteGroup_Handler,
		},
		{
			MethodName: "CompleteInstance",
			Handler:    _WorkerService_CompleteInstance_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/worker_service.proto",
}
