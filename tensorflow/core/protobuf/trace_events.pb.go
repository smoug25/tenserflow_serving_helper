// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/trace_events.proto

package tensorflow_profiler

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// A 'Trace' contains metadata for the individual traces of a system.
type Trace struct {
	// The devices that this trace has information about. Maps from device_id to
	// more data about the specific device.
	Devices map[uint32]*Device `protobuf:"bytes,1,rep,name=devices,proto3" json:"devices,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// All trace events capturing in the profiling period.
	TraceEvents          []*TraceEvent `protobuf:"bytes,4,rep,name=trace_events,json=traceEvents,proto3" json:"trace_events,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Trace) Reset()         { *m = Trace{} }
func (m *Trace) String() string { return proto.CompactTextString(m) }
func (*Trace) ProtoMessage()    {}
func (*Trace) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b590f7ff1b17ea, []int{0}
}

func (m *Trace) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Trace.Unmarshal(m, b)
}
func (m *Trace) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Trace.Marshal(b, m, deterministic)
}
func (m *Trace) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trace.Merge(m, src)
}
func (m *Trace) XXX_Size() int {
	return xxx_messageInfo_Trace.Size(m)
}
func (m *Trace) XXX_DiscardUnknown() {
	xxx_messageInfo_Trace.DiscardUnknown(m)
}

var xxx_messageInfo_Trace proto.InternalMessageInfo

func (m *Trace) GetDevices() map[uint32]*Device {
	if m != nil {
		return m.Devices
	}
	return nil
}

func (m *Trace) GetTraceEvents() []*TraceEvent {
	if m != nil {
		return m.TraceEvents
	}
	return nil
}

// A 'device' is a physical entity in the system and is comprised of several
// resources.
type Device struct {
	// The name of the device.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of this device, unique in a single trace.
	DeviceId uint32 `protobuf:"varint,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The resources on this device, keyed by resource_id;
	Resources            map[uint32]*Resource `protobuf:"bytes,3,rep,name=resources,proto3" json:"resources,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Device) Reset()         { *m = Device{} }
func (m *Device) String() string { return proto.CompactTextString(m) }
func (*Device) ProtoMessage()    {}
func (*Device) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b590f7ff1b17ea, []int{1}
}

func (m *Device) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Device.Unmarshal(m, b)
}
func (m *Device) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Device.Marshal(b, m, deterministic)
}
func (m *Device) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Device.Merge(m, src)
}
func (m *Device) XXX_Size() int {
	return xxx_messageInfo_Device.Size(m)
}
func (m *Device) XXX_DiscardUnknown() {
	xxx_messageInfo_Device.DiscardUnknown(m)
}

var xxx_messageInfo_Device proto.InternalMessageInfo

func (m *Device) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Device) GetDeviceId() uint32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *Device) GetResources() map[uint32]*Resource {
	if m != nil {
		return m.Resources
	}
	return nil
}

// A 'resource' generally is a specific computation component on a device. These
// can range from threads on CPUs to specific arithmetic units on hardware
// devices.
type Resource struct {
	// The name of the resource.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The id of the resource. Unique within a device.
	ResourceId           uint32   `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Resource) Reset()         { *m = Resource{} }
func (m *Resource) String() string { return proto.CompactTextString(m) }
func (*Resource) ProtoMessage()    {}
func (*Resource) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b590f7ff1b17ea, []int{2}
}

func (m *Resource) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Resource.Unmarshal(m, b)
}
func (m *Resource) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Resource.Marshal(b, m, deterministic)
}
func (m *Resource) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Resource.Merge(m, src)
}
func (m *Resource) XXX_Size() int {
	return xxx_messageInfo_Resource.Size(m)
}
func (m *Resource) XXX_DiscardUnknown() {
	xxx_messageInfo_Resource.DiscardUnknown(m)
}

var xxx_messageInfo_Resource proto.InternalMessageInfo

func (m *Resource) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Resource) GetResourceId() uint32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

type TraceEvent struct {
	// The id of the device that this event occurred on. The full dataset should
	// have this device present in the Trace object.
	DeviceId uint32 `protobuf:"varint,1,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// The id of the resource that this event occurred on. The full dataset should
	// have this resource present in the Device object of the Trace object. A
	// resource_id is unique on a specific device, but not necessarily within the
	// trace.
	ResourceId uint32 `protobuf:"varint,2,opt,name=resource_id,json=resourceId,proto3" json:"resource_id,omitempty"`
	// The name of this trace event.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// The timestamp that this event occurred at (in picos since tracing started).
	TimestampPs uint64 `protobuf:"varint,9,opt,name=timestamp_ps,json=timestampPs,proto3" json:"timestamp_ps,omitempty"`
	// The duration of the event in picoseconds if applicable.
	// Events without duration are called instant events.
	DurationPs uint64 `protobuf:"varint,10,opt,name=duration_ps,json=durationPs,proto3" json:"duration_ps,omitempty"`
	// Extra arguments that will be displayed in trace view.
	Args                 map[string]string `protobuf:"bytes,11,rep,name=args,proto3" json:"args,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *TraceEvent) Reset()         { *m = TraceEvent{} }
func (m *TraceEvent) String() string { return proto.CompactTextString(m) }
func (*TraceEvent) ProtoMessage()    {}
func (*TraceEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b590f7ff1b17ea, []int{3}
}

func (m *TraceEvent) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TraceEvent.Unmarshal(m, b)
}
func (m *TraceEvent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TraceEvent.Marshal(b, m, deterministic)
}
func (m *TraceEvent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TraceEvent.Merge(m, src)
}
func (m *TraceEvent) XXX_Size() int {
	return xxx_messageInfo_TraceEvent.Size(m)
}
func (m *TraceEvent) XXX_DiscardUnknown() {
	xxx_messageInfo_TraceEvent.DiscardUnknown(m)
}

var xxx_messageInfo_TraceEvent proto.InternalMessageInfo

func (m *TraceEvent) GetDeviceId() uint32 {
	if m != nil {
		return m.DeviceId
	}
	return 0
}

func (m *TraceEvent) GetResourceId() uint32 {
	if m != nil {
		return m.ResourceId
	}
	return 0
}

func (m *TraceEvent) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *TraceEvent) GetTimestampPs() uint64 {
	if m != nil {
		return m.TimestampPs
	}
	return 0
}

func (m *TraceEvent) GetDurationPs() uint64 {
	if m != nil {
		return m.DurationPs
	}
	return 0
}

func (m *TraceEvent) GetArgs() map[string]string {
	if m != nil {
		return m.Args
	}
	return nil
}

func init() {
	proto.RegisterType((*Trace)(nil), "tensorflow.profiler.Trace")
	proto.RegisterMapType((map[uint32]*Device)(nil), "tensorflow.profiler.Trace.DevicesEntry")
	proto.RegisterType((*Device)(nil), "tensorflow.profiler.Device")
	proto.RegisterMapType((map[uint32]*Resource)(nil), "tensorflow.profiler.Device.ResourcesEntry")
	proto.RegisterType((*Resource)(nil), "tensorflow.profiler.Resource")
	proto.RegisterType((*TraceEvent)(nil), "tensorflow.profiler.TraceEvent")
	proto.RegisterMapType((map[string]string)(nil), "tensorflow.profiler.TraceEvent.ArgsEntry")
}

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/trace_events.proto", fileDescriptor_31b590f7ff1b17ea)
}

var fileDescriptor_31b590f7ff1b17ea = []byte{
	// 459 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xd5, 0x26, 0x69, 0xa9, 0xc7, 0x29, 0x82, 0x85, 0x83, 0x95, 0x0a, 0x35, 0xe4, 0x42, 0xe0,
	0x60, 0x8b, 0x54, 0x08, 0x84, 0x84, 0x50, 0x23, 0x2a, 0xd1, 0x5b, 0x64, 0x21, 0x81, 0xc4, 0xc1,
	0x72, 0xe2, 0x89, 0x6b, 0x35, 0xf6, 0x46, 0xb3, 0xeb, 0x54, 0xfd, 0x15, 0xbe, 0x8e, 0x1b, 0xbf,
	0xc0, 0x11, 0x79, 0x17, 0xdb, 0x1b, 0x64, 0xda, 0xdb, 0xe8, 0xf9, 0xcd, 0x9b, 0x79, 0x6f, 0xbc,
	0xf0, 0x2d, 0xcd, 0xd4, 0x55, 0xb9, 0xf4, 0x57, 0x22, 0x0f, 0x64, 0x2e, 0xca, 0x74, 0xf6, 0x26,
	0x50, 0x58, 0x48, 0x41, 0xeb, 0x8d, 0xb8, 0x89, 0x24, 0xd2, 0x2e, 0x2b, 0xd2, 0xe8, 0x0a, 0x37,
	0x5b, 0x24, 0xeb, 0x4b, 0xb0, 0x12, 0x84, 0xc1, 0x96, 0x84, 0x12, 0xcb, 0x72, 0x1d, 0x28, 0x8a,
	0x57, 0x18, 0xe1, 0x0e, 0x0b, 0x25, 0x7d, 0x8d, 0xf2, 0x27, 0x2d, 0xb9, 0x42, 0xd6, 0xd9, 0x06,
	0x69, 0xf2, 0x8b, 0xc1, 0xc1, 0x97, 0x8a, 0xcb, 0xcf, 0xe1, 0x41, 0x82, 0xbb, 0x6c, 0x85, 0xd2,
	0x63, 0xe3, 0xfe, 0xd4, 0x9d, 0xbd, 0xf0, 0x3b, 0x1a, 0x7c, 0x4d, 0xf6, 0x3f, 0x19, 0xe6, 0x45,
	0xa1, 0xe8, 0x36, 0xac, 0xfb, 0xf8, 0x1c, 0x86, 0xf6, 0x5c, 0x6f, 0xa0, 0x75, 0x4e, 0xff, 0xaf,
	0x73, 0x51, 0xf1, 0x42, 0x57, 0x35, 0xb5, 0x1c, 0x7d, 0x85, 0xa1, 0x2d, 0xce, 0x1f, 0x41, 0xff,
	0x1a, 0x6f, 0x3d, 0x36, 0x66, 0xd3, 0xe3, 0xb0, 0x2a, 0xf9, 0x6b, 0x38, 0xd8, 0xc5, 0x9b, 0x12,
	0xbd, 0xde, 0x98, 0x4d, 0xdd, 0xd9, 0x49, 0xa7, 0xbc, 0xd1, 0x08, 0x0d, 0xf3, 0x7d, 0xef, 0x1d,
	0x9b, 0xfc, 0x64, 0x70, 0x68, 0x50, 0xce, 0x61, 0x50, 0xc4, 0x39, 0x6a, 0x51, 0x27, 0xd4, 0x35,
	0x3f, 0x01, 0xc7, 0xd8, 0x88, 0xb2, 0x44, 0x2b, 0x1f, 0x87, 0x47, 0x06, 0xb8, 0x4c, 0xf8, 0x67,
	0x70, 0x08, 0xa5, 0x28, 0xa9, 0x4a, 0xa7, 0xaf, 0x5d, 0xbd, 0xba, 0x63, 0xac, 0x1f, 0xd6, 0x64,
	0x13, 0x50, 0xdb, 0x3c, 0xfa, 0x0e, 0x0f, 0xf7, 0x3f, 0x76, 0x18, 0x3c, 0xdb, 0x37, 0xf8, 0xac,
	0x73, 0x52, 0xad, 0x62, 0x5b, 0xfc, 0x08, 0x47, 0x35, 0xdc, 0xe9, 0xf1, 0x14, 0xdc, 0x7a, 0x93,
	0xd6, 0x25, 0xd4, 0xd0, 0x65, 0x32, 0xf9, 0xd1, 0x03, 0x68, 0x0f, 0xb3, 0x9f, 0x09, 0xfb, 0x27,
	0x93, 0xfb, 0xc4, 0x9a, 0x0d, 0xfa, 0xd6, 0x06, 0xcf, 0x61, 0xa8, 0xb2, 0x1c, 0xa5, 0x8a, 0xf3,
	0x6d, 0xb4, 0x95, 0x9e, 0x33, 0x66, 0xd3, 0x41, 0xe8, 0x36, 0xd8, 0x42, 0x56, 0xba, 0x49, 0x49,
	0xb1, 0xca, 0x44, 0x51, 0x31, 0x40, 0x33, 0xa0, 0x86, 0x16, 0x92, 0x7f, 0x80, 0x41, 0x4c, 0xa9,
	0xf4, 0x5c, 0x7d, 0x87, 0x97, 0xf7, 0xfc, 0x5d, 0xfe, 0x39, 0xa5, 0x7f, 0xcf, 0xa0, 0xdb, 0x46,
	0x6f, 0xc1, 0x69, 0x20, 0x3b, 0x7c, 0xc7, 0x84, 0xff, 0xd4, 0x0e, 0xdf, 0xb1, 0xd2, 0x9d, 0xcf,
	0xc0, 0x13, 0x94, 0xda, 0xe3, 0xd6, 0x14, 0xe7, 0x78, 0x23, 0xe8, 0x7a, 0xfe, 0xb8, 0x1d, 0x28,
	0x17, 0xd5, 0x6b, 0x93, 0x0b, 0xf6, 0x9b, 0xb1, 0xe5, 0xa1, 0x7e, 0x7a, 0x67, 0x7f, 0x02, 0x00,
	0x00, 0xff, 0xff, 0xff, 0xe6, 0xa2, 0xeb, 0xd6, 0x03, 0x00, 0x00,
}
