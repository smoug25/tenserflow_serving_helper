// Code generated by protoc-gen-go. DO NOT EDIT.
// source: github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/master_service.proto

package tensorflow_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

func init() {
	proto.RegisterFile("github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/master_service.proto", fileDescriptor_aa9e97180c60456c)
}

var fileDescriptor_aa9e97180c60456c = []byte{
	// 376 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0x3f, 0x6f, 0xe2, 0x30,
	0x18, 0xc6, 0x75, 0xc3, 0x71, 0x92, 0xef, 0x10, 0x52, 0x6e, 0xb9, 0x4b, 0x25, 0xa0, 0x74, 0x4f,
	0x24, 0x50, 0xb7, 0x4e, 0xd0, 0x6e, 0xa5, 0xa2, 0xa1, 0x13, 0x0b, 0x72, 0xc2, 0x4b, 0x88, 0xea,
	0xd8, 0xa9, 0x5f, 0xbb, 0xed, 0x77, 0xeb, 0x97, 0xab, 0xf2, 0x8f, 0xd8, 0x69, 0x60, 0xea, 0xfa,
	0xfe, 0x9e, 0xfc, 0xec, 0xc7, 0xb1, 0xc9, 0x26, 0x4e, 0xd4, 0x41, 0x87, 0x5e, 0x24, 0x52, 0x1f,
	0x53, 0xa1, 0xe3, 0xe9, 0xb5, 0xaf, 0x80, 0xa3, 0x90, 0x7b, 0x26, 0xde, 0xb6, 0x08, 0xf2, 0x35,
	0xe1, 0xf1, 0xf6, 0x00, 0x2c, 0x03, 0x69, 0x10, 0x3f, 0x12, 0x12, 0xfc, 0x4c, 0x0a, 0x25, 0x42,
	0xbd, 0xf7, 0x53, 0x8a, 0x0a, 0x64, 0x19, 0x8f, 0xc0, 0x2b, 0xe6, 0xce, 0xa0, 0x89, 0x7b, 0xb1,
	0xcc, 0x22, 0x37, 0xf8, 0xce, 0xc5, 0xca, 0x45, 0xa6, 0x1f, 0x3d, 0xd2, 0x5f, 0x16, 0x83, 0x75,
	0xb9, 0xb8, 0xf3, 0x44, 0xfa, 0x0b, 0x09, 0x54, 0xc1, 0x1a, 0x10, 0x13, 0xc1, 0x9d, 0xb1, 0x67,
	0x6c, 0xc4, 0x42, 0x01, 0xbc, 0x68, 0x40, 0xe5, 0x5e, 0x9e, 0x49, 0x60, 0x26, 0x38, 0x16, 0xd6,
	0xbb, 0x77, 0x05, 0x7c, 0xd7, 0x69, 0xb5, 0x50, 0xa7, 0xb5, 0x95, 0xa8, 0xac, 0x1b, 0x32, 0x58,
	0x51, 0xa9, 0x12, 0xca, 0x02, 0xcd, 0xd7, 0xa0, 0x74, 0xe6, 0x4c, 0xcc, 0xaf, 0x5a, 0xb0, 0x36,
	0x5f, 0x9d, 0xcd, 0x54, 0xee, 0x39, 0xf9, 0x95, 0xcf, 0x14, 0x64, 0x8e, 0x6b, 0xe6, 0xab, 0x61,
	0xed, 0xba, 0xe8, 0x64, 0x95, 0xe3, 0x91, 0xfc, 0x59, 0x30, 0x81, 0xc7, 0xa3, 0x1c, 0x59, 0x07,
	0x65, 0x90, 0xda, 0x36, 0x3e, 0x1d, 0xa8, 0x94, 0x0f, 0xe4, 0xf7, 0x7d, 0x82, 0xea, 0x16, 0xf2,
	0x9f, 0x85, 0xce, 0xd0, 0xfc, 0xc0, 0x00, 0xb5, 0x70, 0x74, 0x92, 0x57, 0xbe, 0x1b, 0xf2, 0x33,
	0x00, 0x04, 0xe5, 0xfc, 0xb3, 0x8a, 0xe4, 0xa3, 0xda, 0xf1, 0xbf, 0x83, 0x34, 0x05, 0x97, 0xf4,
	0x19, 0x16, 0x94, 0x31, 0x1a, 0x32, 0xb0, 0x0b, 0x9a, 0xa4, 0xb3, 0xa0, 0x1d, 0x68, 0x0a, 0x06,
	0x9a, 0x1f, 0x8d, 0xc3, 0xd6, 0xf9, 0xb6, 0x85, 0xa3, 0x93, 0xbc, 0xb9, 0x23, 0x01, 0x30, 0xa0,
	0xd8, 0xec, 0x72, 0x62, 0x17, 0xb2, 0x60, 0xe7, 0x1d, 0xf9, 0x92, 0x29, 0xdd, 0xf3, 0x19, 0x71,
	0x85, 0x8c, 0xcd, 0xe4, 0x2e, 0x41, 0x25, 0x35, 0x57, 0x49, 0x0a, 0xf3, 0xbf, 0xd6, 0xc3, 0x5a,
	0xe5, 0xef, 0x0d, 0x57, 0x3f, 0xc2, 0x5e, 0xf1, 0xf2, 0x66, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x37, 0x62, 0xdf, 0x81, 0x3c, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MasterServiceClient is the client API for MasterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MasterServiceClient interface {
	// Creates a session.
	CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error)
	// Extends a session.
	ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error)
	// Prepares future partial run calls.
	PartialRunSetup(ctx context.Context, in *PartialRunSetupRequest, opts ...grpc.CallOption) (*PartialRunSetupResponse, error)
	// Drives the graph computation.
	RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (*RunStepResponse, error)
	// Closes a session.
	CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error)
	// List the devices usable by the master.
	ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error)
	// Close and abandon all existing sessions.  Ongoing computations
	// will no longer affect fresh ones via the resources in containers listed in
	// the ResetRequest.  See ResetRequest for more details.
	Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error)
	// Registers a callable for execution with RunCallable.
	MakeCallable(ctx context.Context, in *MakeCallableRequest, opts ...grpc.CallOption) (*MakeCallableResponse, error)
	// Executes a callable registered with MakeCallable.
	RunCallable(ctx context.Context, in *RunCallableRequest, opts ...grpc.CallOption) (*RunCallableResponse, error)
	// Frees resources associated with a callable registered with MakeCallable.
	ReleaseCallable(ctx context.Context, in *ReleaseCallableRequest, opts ...grpc.CallOption) (*ReleaseCallableResponse, error)
}

type masterServiceClient struct {
	cc *grpc.ClientConn
}

func NewMasterServiceClient(cc *grpc.ClientConn) MasterServiceClient {
	return &masterServiceClient{cc}
}

func (c *masterServiceClient) CreateSession(ctx context.Context, in *CreateSessionRequest, opts ...grpc.CallOption) (*CreateSessionResponse, error) {
	out := new(CreateSessionResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/CreateSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ExtendSession(ctx context.Context, in *ExtendSessionRequest, opts ...grpc.CallOption) (*ExtendSessionResponse, error) {
	out := new(ExtendSessionResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/ExtendSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) PartialRunSetup(ctx context.Context, in *PartialRunSetupRequest, opts ...grpc.CallOption) (*PartialRunSetupResponse, error) {
	out := new(PartialRunSetupResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/PartialRunSetup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RunStep(ctx context.Context, in *RunStepRequest, opts ...grpc.CallOption) (*RunStepResponse, error) {
	out := new(RunStepResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/RunStep", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) CloseSession(ctx context.Context, in *CloseSessionRequest, opts ...grpc.CallOption) (*CloseSessionResponse, error) {
	out := new(CloseSessionResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/CloseSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ListDevices(ctx context.Context, in *ListDevicesRequest, opts ...grpc.CallOption) (*ListDevicesResponse, error) {
	out := new(ListDevicesResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/ListDevices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) Reset(ctx context.Context, in *ResetRequest, opts ...grpc.CallOption) (*ResetResponse, error) {
	out := new(ResetResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/Reset", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) MakeCallable(ctx context.Context, in *MakeCallableRequest, opts ...grpc.CallOption) (*MakeCallableResponse, error) {
	out := new(MakeCallableResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/MakeCallable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) RunCallable(ctx context.Context, in *RunCallableRequest, opts ...grpc.CallOption) (*RunCallableResponse, error) {
	out := new(RunCallableResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/RunCallable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *masterServiceClient) ReleaseCallable(ctx context.Context, in *ReleaseCallableRequest, opts ...grpc.CallOption) (*ReleaseCallableResponse, error) {
	out := new(ReleaseCallableResponse)
	err := c.cc.Invoke(ctx, "/tensorflow.grpc.MasterService/ReleaseCallable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MasterServiceServer is the server API for MasterService service.
type MasterServiceServer interface {
	// Creates a session.
	CreateSession(context.Context, *CreateSessionRequest) (*CreateSessionResponse, error)
	// Extends a session.
	ExtendSession(context.Context, *ExtendSessionRequest) (*ExtendSessionResponse, error)
	// Prepares future partial run calls.
	PartialRunSetup(context.Context, *PartialRunSetupRequest) (*PartialRunSetupResponse, error)
	// Drives the graph computation.
	RunStep(context.Context, *RunStepRequest) (*RunStepResponse, error)
	// Closes a session.
	CloseSession(context.Context, *CloseSessionRequest) (*CloseSessionResponse, error)
	// List the devices usable by the master.
	ListDevices(context.Context, *ListDevicesRequest) (*ListDevicesResponse, error)
	// Close and abandon all existing sessions.  Ongoing computations
	// will no longer affect fresh ones via the resources in containers listed in
	// the ResetRequest.  See ResetRequest for more details.
	Reset(context.Context, *ResetRequest) (*ResetResponse, error)
	// Registers a callable for execution with RunCallable.
	MakeCallable(context.Context, *MakeCallableRequest) (*MakeCallableResponse, error)
	// Executes a callable registered with MakeCallable.
	RunCallable(context.Context, *RunCallableRequest) (*RunCallableResponse, error)
	// Frees resources associated with a callable registered with MakeCallable.
	ReleaseCallable(context.Context, *ReleaseCallableRequest) (*ReleaseCallableResponse, error)
}

// UnimplementedMasterServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMasterServiceServer struct {
}

func (*UnimplementedMasterServiceServer) CreateSession(ctx context.Context, req *CreateSessionRequest) (*CreateSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSession not implemented")
}
func (*UnimplementedMasterServiceServer) ExtendSession(ctx context.Context, req *ExtendSessionRequest) (*ExtendSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExtendSession not implemented")
}
func (*UnimplementedMasterServiceServer) PartialRunSetup(ctx context.Context, req *PartialRunSetupRequest) (*PartialRunSetupResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PartialRunSetup not implemented")
}
func (*UnimplementedMasterServiceServer) RunStep(ctx context.Context, req *RunStepRequest) (*RunStepResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunStep not implemented")
}
func (*UnimplementedMasterServiceServer) CloseSession(ctx context.Context, req *CloseSessionRequest) (*CloseSessionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloseSession not implemented")
}
func (*UnimplementedMasterServiceServer) ListDevices(ctx context.Context, req *ListDevicesRequest) (*ListDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDevices not implemented")
}
func (*UnimplementedMasterServiceServer) Reset(ctx context.Context, req *ResetRequest) (*ResetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (*UnimplementedMasterServiceServer) MakeCallable(ctx context.Context, req *MakeCallableRequest) (*MakeCallableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MakeCallable not implemented")
}
func (*UnimplementedMasterServiceServer) RunCallable(ctx context.Context, req *RunCallableRequest) (*RunCallableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RunCallable not implemented")
}
func (*UnimplementedMasterServiceServer) ReleaseCallable(ctx context.Context, req *ReleaseCallableRequest) (*ReleaseCallableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseCallable not implemented")
}

func RegisterMasterServiceServer(s *grpc.Server, srv MasterServiceServer) {
	s.RegisterService(&_MasterService_serviceDesc, srv)
}

func _MasterService_CreateSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CreateSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/CreateSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CreateSession(ctx, req.(*CreateSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ExtendSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtendSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ExtendSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/ExtendSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ExtendSession(ctx, req.(*ExtendSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_PartialRunSetup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartialRunSetupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).PartialRunSetup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/PartialRunSetup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).PartialRunSetup(ctx, req.(*PartialRunSetupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RunStep_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunStepRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RunStep(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/RunStep",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RunStep(ctx, req.(*RunStepRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_CloseSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloseSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).CloseSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/CloseSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).CloseSession(ctx, req.(*CloseSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ListDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ListDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/ListDevices",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ListDevices(ctx, req.(*ListDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ResetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/Reset",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).Reset(ctx, req.(*ResetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_MakeCallable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MakeCallableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).MakeCallable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/MakeCallable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).MakeCallable(ctx, req.(*MakeCallableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_RunCallable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RunCallableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).RunCallable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/RunCallable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).RunCallable(ctx, req.(*RunCallableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MasterService_ReleaseCallable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReleaseCallableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MasterServiceServer).ReleaseCallable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tensorflow.grpc.MasterService/ReleaseCallable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MasterServiceServer).ReleaseCallable(ctx, req.(*ReleaseCallableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MasterService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "tensorflow.grpc.MasterService",
	HandlerType: (*MasterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSession",
			Handler:    _MasterService_CreateSession_Handler,
		},
		{
			MethodName: "ExtendSession",
			Handler:    _MasterService_ExtendSession_Handler,
		},
		{
			MethodName: "PartialRunSetup",
			Handler:    _MasterService_PartialRunSetup_Handler,
		},
		{
			MethodName: "RunStep",
			Handler:    _MasterService_RunStep_Handler,
		},
		{
			MethodName: "CloseSession",
			Handler:    _MasterService_CloseSession_Handler,
		},
		{
			MethodName: "ListDevices",
			Handler:    _MasterService_ListDevices_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _MasterService_Reset_Handler,
		},
		{
			MethodName: "MakeCallable",
			Handler:    _MasterService_MakeCallable_Handler,
		},
		{
			MethodName: "RunCallable",
			Handler:    _MasterService_RunCallable_Handler,
		},
		{
			MethodName: "ReleaseCallable",
			Handler:    _MasterService_ReleaseCallable_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "github.com/smoug25/tensorflow_serving_helper/tensorflow/core/protobuf/master_service.proto",
}
